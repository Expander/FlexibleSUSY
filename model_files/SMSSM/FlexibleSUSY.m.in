
FSModelName = "@CLASSNAME@";
FSEigenstates = SARAH`EWSB;

(* CSMSSM input parameters *)

MINPAR = { {1, m0},
           {2, m12},
           {3, TanBeta},
           {4, Sign[\[Mu]]},
           {5, Azero}
         };

EXTPAR = { {61, LambdaInput},
           {62, KappaInput},
           {65, LambdaSInput},
           {66, L1Input},
           {68, MSInput},
           {69, BMSInput}
         };

EWSBOutputParameters = { \[Mu], B[\[Mu]], L[L1] };

SUSYScale = Sqrt[M[Su[1]]*M[Su[6]]];

SUSYScaleFirstGuess = Sqrt[m0^2 + 4 m12^2];

SUSYScaleInput = {
   {vS, LambdaSInput / \[Lambda]}
};

HighScale = g1 == g2;

HighScaleFirstGuess = 1.0 10^16;

HighScaleInput={
   {T[Ye], Azero*Ye},
   {T[Yd], Azero*Yd},
   {T[Yu], Azero*Yu},
   {mq2, UNITMATRIX[3] m0^2},
   {ml2, UNITMATRIX[3] m0^2},
   {md2, UNITMATRIX[3] m0^2},
   {mu2, UNITMATRIX[3] m0^2},
   {me2, UNITMATRIX[3] m0^2},
   {mHu2, m0^2},
   {mHd2, m0^2},
   {ms2, m0^2},
   {\[Lambda], LambdaInput},
   {\[Kappa], KappaInput},
   {T[\[Kappa]], Azero \[Kappa]},
   {T[\[Lambda]], Azero LambdaInput},
   {MassB, m12},
   {MassWB,m12},
   {MassG,m12},
   {L1, L1Input},
   {MS, MSInput},
   {B[MS], BMSInput}
};

LowScale = SM[MZ];

LowScaleFirstGuess = SM[MZ];

LowScaleInput = {
   {Yu, Automatic},
   {Yd, Automatic},
   {Ye, Automatic},
   {vd, 2 MZDRbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2] Cos[ArcTan[TanBeta]]},
   {vu, 2 MZDRbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2] Sin[ArcTan[TanBeta]]}
};

InitialGuessAtLowScale = {
   {vd, SM[vev] Cos[ArcTan[TanBeta]]},
   {vu, SM[vev] Sin[ArcTan[TanBeta]]},
   {\[Lambda], LambdaInput},
   {\[Mu], SM[MZ]},
   {B[\[Mu]], SM[MZ]^2},
   {L[L1], SM[MZ]^3},
   {Yu, Automatic},
   {Yd, Automatic},
   {Ye, Automatic}
};

InitialGuessAtHighScale = {};

(* This tree-level EWSB solution was generated with FlexibleSUSY
   0.3. *)
TreeLevelEWSBSolution = {
   { B[\[Mu]],
    (-20*mHd2*vd*vu + 20*mHu2*vd*vu - 3*g1^2*vd^3*vu -
      5*g2^2*vd^3*vu + 3*g1^2*vd*vu^3 + 5*g2^2*vd*vu^3 -
      10*vd^2*\[Lambda]*conj[L1] + 10*vu^2*\[Lambda]*conj[L1] -
      5*Sqrt[2]*vd^2*vS*\[Lambda]*conj[MS] + 5*Sqrt[2]*vS*vu^2*\[Lambda]*
       conj[MS] - 5*vd^2*vS^2*\[Lambda]*conj[\[Kappa]] +
      5*vS^2*vu^2*\[Lambda]*conj[\[Kappa]] - 10*L1*vd^2*conj[\[Lambda]] -
      5*Sqrt[2]*MS*vd^2*vS*conj[\[Lambda]] + 10*L1*vu^2*conj[\[Lambda]] +
      5*Sqrt[2]*MS*vS*vu^2*conj[\[Lambda]] - 5*vd^2*vS^2*\[Kappa]*
       conj[\[Lambda]] + 5*vS^2*vu^2*\[Kappa]*conj[\[Lambda]] +
      10*vd^3*vu*\[Lambda]*conj[\[Lambda]] - 10*vd*vu^3*\[Lambda]*
       conj[\[Lambda]] - 5*Sqrt[2]*vd^2*vS*conj[T[\[Lambda]]] +
      5*Sqrt[2]*vS*vu^2*conj[T[\[Lambda]]] - 5*Sqrt[2]*vd^2*vS*T[\[Lambda]] +
      5*Sqrt[2]*vS*vu^2*T[\[Lambda]])/(20*(vd^2 - vu^2))
   },
   { \[Mu],
    (-20*Sqrt[2]*vd*vS*\[Lambda] - 20*Sqrt[2]*vd*vS*conj[\[Lambda]] +
      Sign[\[Mu]] *
      Sqrt[(20*Sqrt[2]*vd*vS*\[Lambda] + 20*Sqrt[2]*vd*vS*conj[\[Lambda]])^
         2 - 160*vd*(40*mHd2*vd + 3*g1^2*vd^3 + 5*g2^2*vd^3 -
          3*g1^2*vd*vu^2 - 5*g2^2*vd*vu^2 - 40*vu*B[\[Mu]] -
          20*vu*\[Lambda]*conj[L1] - 10*Sqrt[2]*vS*vu*\[Lambda]*conj[MS] -
          10*vS^2*vu*\[Lambda]*conj[\[Kappa]] - 20*L1*vu*conj[\[Lambda]] -
          10*Sqrt[2]*MS*vS*vu*conj[\[Lambda]] - 10*vS^2*vu*\[Kappa]*
           conj[\[Lambda]] + 20*vd*vS^2*\[Lambda]*conj[\[Lambda]] +
          20*vd*vu^2*\[Lambda]*conj[\[Lambda]] - 10*Sqrt[2]*vS*vu*
           conj[T[\[Lambda]]] - 10*Sqrt[2]*vS*vu*T[\[Lambda]])])/(80*vd)
   },
   { L[L1],
     -(4*ms2*vS + Sqrt[2]*vd^2*\[Lambda]*\[Mu] +
       Sqrt[2]*vu^2*\[Lambda]*\[Mu] + 2*vS*B[MS] + 2*Sqrt[2]*MS*conj[L1] +
       4*vS*\[Kappa]*conj[L1] + 2*Sqrt[2]*L1*conj[MS] + 4*MS*vS*conj[MS] +
       3*Sqrt[2]*vS^2*\[Kappa]*conj[MS] - Sqrt[2]*vd*vu*\[Lambda]*conj[MS] +
       4*L1*vS*conj[\[Kappa]] + 3*Sqrt[2]*MS*vS^2*conj[\[Kappa]] +
       4*vS^3*\[Kappa]*conj[\[Kappa]] - 2*vd*vS*vu*\[Lambda]*conj[\[Kappa]] -
       Sqrt[2]*MS*vd*vu*conj[\[Lambda]] - 2*vd*vS*vu*\[Kappa]*
        conj[\[Lambda]] + 2*vd^2*vS*\[Lambda]*conj[\[Lambda]] +
       2*vS*vu^2*\[Lambda]*conj[\[Lambda]] + Sqrt[2]*vd^2*\[Mu]*
        conj[\[Lambda]] + Sqrt[2]*vu^2*\[Mu]*conj[\[Lambda]] +
       2*vS*conj[B[MS]] + Sqrt[2]*vS^2*conj[T[\[Kappa]]] -
       Sqrt[2]*vd*vu*conj[T[\[Lambda]]] + Sqrt[2]*vS^2*T[\[Kappa]] -
       Sqrt[2]*vd*vu*T[\[Lambda]])/(4*Sqrt[2])
   }
};

UseHiggs2LoopNMSSM = True;
EffectiveMu = \[Mu] + \[Lambda] vS / Sqrt[2];

PotentialLSPParticles = { Chi, Sv, Su, Sd, Se, Cha, Glu };

DefaultPoleMassPrecision = MediumPrecision;
HighPoleMassPrecision    = {hh, Ah, Hpm};
MediumPoleMassPrecision  = {};
LowPoleMassPrecision     = {};

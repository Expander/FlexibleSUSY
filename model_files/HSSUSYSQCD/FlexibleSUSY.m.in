FSModelName = "@CLASSNAME@";
FSEigenstates = SARAH`EWSB;
FSDefaultSARAHModel = SM;

(* input parameters *)

MINPAR = {};

EXTPAR = {
    {0, MSUSY},
    {1, M1Input},
    {2, M2Input},
    {3, M3Input},
    {4, MuInput},
    {5, mAInput},
    {6, MEWSB},
    {7, AtInput},
    {8, AbInput},
    {9, AtauInput},
    {25, TanBeta},
    {100, LambdaLoopOrder},
    {101, TwoLoopAtAs},
    {102, TwoLoopAbAs},
    {103, TwoLoopAtAb},
    {104, TwoLoopAtauAtau},
    {105, TwoLoopAtAt},
    {200, DeltaEFT}
};

FSAuxiliaryParameterInfo = {
    {msq2, { LesHouches -> MSQ2IN,
             ParameterDimensions -> {3,3},
             InputParameter -> True
           } },
    {msu2, { LesHouches -> MSU2IN,
             ParameterDimensions -> {3,3},
             InputParameter -> True
           } },
    {msd2, { LesHouches -> MSD2IN,
             ParameterDimensions -> {3,3},
             InputParameter -> True
           } },
    {msl2, { LesHouches -> MSL2IN,
             ParameterDimensions -> {3,3},
             InputParameter -> True
           } },
    {mse2, { LesHouches -> MSE2IN,
             ParameterDimensions -> {3,3},
             InputParameter -> True
           } }
};

EWSBOutputParameters = { mu2 };

(* The high scale where we match to the MSSM *)
HighScale = MSUSY;

HighScaleFirstGuess = MSUSY;

HighScaleInput = {
    {\[Lambda], lambdaTree
                + UnitStep[LambdaLoopOrder-1] (
                    + 0 lambda1LReg + lambda1LPhiGaugeless
                    + 0 lambda1LChi1 + 0 lambda1LChi2
                    + 0 lambda1Lbottom + 0 lambda1Ltau)
                + UnitStep[LambdaLoopOrder-2] (
                    If[TwoLoopAtAs >= 1, (
                        Which[IsCloseRel[SCALE^2,msq2[3,3],0.01] &&
                              IsCloseRel[SCALE^2,msu2[3,3],0.01] &&
                              IsCloseRel[SCALE,M3Input,0.01],
                              lambda2LPhiHSSAlphaTAlphaSDegenerate,
                              IsCloseRel[M3Input^2,msq2[3,3],0.01] &&
                              IsCloseRel[M3Input^2,msu2[3,3],0.01],
                              lambda2LPhiHSSAlphaTAlphaSMQMUM3Degenerate,
                              IsCloseRel[M3Input^2,msq2[3,3],0.01],
                              lambda2LPhiHSSAlphaTAlphaSMQM3Degenerate,
                              IsCloseRel[M3Input^2,msu2[3,3],0.01],
                              lambda2LPhiHSSAlphaTAlphaSMUM3Degenerate,
                              Not[IsClose[M3Input^2, 0]] &&
                              IsCloseRel[msu2[3,3]/M3Input^2,msq2[3,3]/M3Input^2,0.01],
                              lambda2LPhiHSSAlphaTAlphaSX1X2Degenerate,
                              True,
                              lambda2LPhiHSSAlphaTAlphaSFull
                             ]
                      ), 0]
                    + 0 If[TwoLoopAtAt >= 1, (
                        Which[IsCloseRel[msu2[3,3],msq2[3,3],0.01] &&
                              IsCloseRel[mAInput^2,msu2[3,3],0.01],
                              lambda2LHSSAlphaT2,
                              True,
                              lambda2LHSSAlphaT2Generic
                             ]
                      ), 0]
                    + 0 If[TwoLoopAbAs >= 1, (
                        Which[IsCloseRel[msu2[3,3],msq2[3,3],0.01] &&
                              IsCloseRel[Sqrt[msu2[3,3]],M3Input,0.01],
                              lambda2LPhiHSSAlphaBAlphaSDegenerate,
                              IsCloseRel[msq2[3,3],msu2[3,3],0.01],
                              lambda2LPhiHSSAlphaBAlphaSDegenerateSquark,
                              True,
                              lambda2LPhiHSSAlphaBAlphaSFull
                             ]
                      ), 0]
                    + 0 If[TwoLoopAtAb >= 1, (
                        Which[IsCloseRel[SCALE^2,msq2[3,3],0.01] &&
                              IsCloseRel[SCALE^2,msu2[3,3],0.01] &&
                              IsCloseRel[SCALE^2,msd2[3,3],0.01] &&
                              IsCloseRel[SCALE,mAInput,0.01] &&
                              IsCloseRel[SCALE,Abs[MuInput],0.01],
                              lambda2LHSSAlphaTAlphaBAllDegenerate,
                              True,
                              lambda2LHSSAlphaTAlphaBGeneric
                             ]
                      ), 0]
                    + 0 If[TwoLoopAtauAtau >= 1, lambda2LHSSTau, 0]
                    + If[LambdaLoopOrder >= 3, lambda3LATASASDegenerate, 0]
                )
    }
};

(* The scale where we impose the EWSB conditions
   and calculate the spectrum *)
SUSYScale = MEWSB;

SUSYScaleFirstGuess = MEWSB;

SUSYScaleInput = {};

LowScale = LowEnergyConstant[MZ];

LowScaleFirstGuess = LowEnergyConstant[MZ];

LowScaleInput = {
   {v, 2 MZMSbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2]},
   {Yu, Automatic},
   {Yd, Automatic},
   {Ye, Automatic}
};

InitialGuessAtLowScale = {
   {v, LowEnergyConstant[vev]},
   {Yu, Automatic},
   {Yd, Automatic},
   {Ye, Automatic}
};

DefaultPoleMassPrecision = MediumPrecision;
HighPoleMassPrecision    = {};
MediumPoleMassPrecision  = {};
LowPoleMassPrecision     = {};

OnlyLowEnergyFlexibleSUSY = False;
UseHiggs2LoopSM = True;
UseHiggs3LoopSM = True;
UseSM3LoopRGEs = True;
UseYukawa3LoopQCD = True;
UseSMAlphaS3Loop = True;

ExtraSLHAOutputBlocks = {
};

SARAH`ParameterDefinitions = Append[
    Cases[SARAH`ParameterDefinitions, {p_ /; p =!= SARAH`\[Lambda], ___}],
    {SARAH`\[Lambda], { Description -> "SM Higgs Selfcouplings" } }
];

Get[FileNameJoin[{Directory[], "meta", "SM", "HSSUSY_corrections.m"}]];

lambda1LPhiGaugeless = lambda1LPhi /. { g1 -> 0, g2 -> 0 };

(* enable only O(at*(1 + as + as^2)) *)

FSBetaFunctionRules = {
    {g1 -> 0, g2 -> 0, \[Lambda] -> 0, Ye[__] -> 0, Yd[__] -> 0, Ye -> 0, Yd -> 0}, (* 1L *)
    {g1 -> 0, g2 -> 0, \[Lambda] -> 0, Ye[__] -> 0, Yd[__] -> 0, Yu[__] -> 0, Ye -> 0, Yd -> 0, Yu -> 0}, (* 2L *)
    {g1 -> 0, g2 -> 0, \[Lambda] -> 0, Ye[__] -> 0, Yd[__] -> 0, Yu[__] -> 0, Ye -> 0, Yd -> 0, Yu -> 0}  (* 3L *)
};

FSSelfEnergyRules = {
    (* 1L *)
    {
        p -> 0,
        (Mass|Mass2)[VZ|gZ|SARAH`VectorV] -> 0,
        (Mass|Mass2)[VWp|gWp|gWpC|SARAH`VectorW] -> 0,
        (Mass|Mass2)[VG|gG|SARAH`VectorG] -> 0,
        (Mass|Mass2)[VP|gP|SARAH`VectorP] -> 0,
        (Mass|Mass2)[hh|Ah|Hp] -> 0,
        (Mass|Mass2)[(Fd|Fe)[_]] -> 0
    }
};

FSVertexRules = {
    g1 -> 0,
    g2 -> 0,
    \[Lambda] -> 0,
    Ye[__] -> 0,
    Yd[__] -> 0
};

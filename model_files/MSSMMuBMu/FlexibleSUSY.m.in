
FSModelName = "@CLASSNAME@";
FSEigenstates = SARAH`EWSB;
FSDefaultSARAHModel = MSSM;

(* CMSSM input parameters *)

MINPAR = {
    {4, Sign[\[Mu]]}
};

FSExtraInputParameters = {
    {TanBeta, TanBeta, {1}},
    {Ms, Ms, {1}},
    {Xtt, Xtt, {1}}
};

EWSBOutputParameters = { mHd2, mHu2 };

SUSYScale = Ms;

SUSYScaleFirstGuess = Ms;

SUSYScaleInput = {
{MassB, Ms},
{MassWB, Ms},
{MassG, Ms},
{mq2, ZEROMATRIX[3,3]},
{mu2, ZEROMATRIX[3,3]},
{md2, ZEROMATRIX[3,3]},
{ml2, ZEROMATRIX[3,3]},
{me2, ZEROMATRIX[3,3]},
{mq2[1,1], Sqr[Ms]},
{mu2[1,1], Sqr[Ms]},
{md2[1,1], Sqr[Ms]},
{ml2[1,1], Sqr[Ms]},
{me2[1,1], Sqr[Ms]},
{mq2[2,2], Sqr[Ms]},
{mu2[2,2], Sqr[Ms]},
{md2[2,2], Sqr[Ms]},
{ml2[2,2], Sqr[Ms]},
{me2[2,2], Sqr[Ms]},
{mq2[3,3], Sqr[Ms]},
{mu2[3,3], Sqr[Ms]},
{md2[3,3], Sqr[Ms]},
{ml2[3,3], Sqr[Ms]},
{me2[3,3], Sqr[Ms]},
{\[Mu], Ms},
{B[\[Mu]], Sqr[Ms]/(TanBeta + 1/TanBeta)},
{T[Yu], \[Mu]/TanBeta Yu},
{T[Yd], \[Mu] TanBeta Yd},
{T[Ye], \[Mu] TanBeta Ye},
{T[Yu][3,3], (1/TanBeta + Xtt) Yu[3,3] Ms},
{vd, vu / TanBeta}
};

InitialGuessAtLowScale = {
{vu, LowEnergyConstant[vev] Sin[ArcTan[TanBeta]]},
{vd, LowEnergyConstant[vev] Cos[ArcTan[TanBeta]]},
{Yu, Automatic},
{Yd, Automatic},
{Ye, Automatic},
{MassB, Ms},
{MassWB, Ms},
{MassG, Ms},
{mq2, ZEROMATRIX[3,3]},
{mu2, ZEROMATRIX[3,3]},
{md2, ZEROMATRIX[3,3]},
{ml2, ZEROMATRIX[3,3]},
{me2, ZEROMATRIX[3,3]},
{mq2[1,1], Sqr[Ms]},
{mu2[1,1], Sqr[Ms]},
{md2[1,1], Sqr[Ms]},
{ml2[1,1], Sqr[Ms]},
{me2[1,1], Sqr[Ms]},
{mq2[2,2], Sqr[Ms]},
{mu2[2,2], Sqr[Ms]},
{md2[2,2], Sqr[Ms]},
{ml2[2,2], Sqr[Ms]},
{me2[2,2], Sqr[Ms]},
{mq2[3,3], Sqr[Ms]},
{mu2[3,3], Sqr[Ms]},
{md2[3,3], Sqr[Ms]},
{ml2[3,3], Sqr[Ms]},
{me2[3,3], Sqr[Ms]},
{\[Mu], Ms},
{B[\[Mu]], Sqr[Ms]/(TanBeta + 1./TanBeta)},
{T[Yu], MODELPARAMETER[Yu] Ms/TanBeta},
{T[Yd], MODELPARAMETER[Yd] Ms TanBeta},
{T[Ye], MODELPARAMETER[Ye] Ms TanBeta},
{T[Yu][3,3], (1/TanBeta + Xtt) Ms }
};

LowScaleInput = {
{Yu, Automatic},
{Yd, Automatic},
{Ye, Automatic},
{vu, Sqrt[4 Sqr[MZDRbar] / (g2^2 + 3/5 g1^2) - Sqr[vd]]}
};

(* InitialGuessAtLowScale is ignored if SMTower is true *)

SUSYScaleUserMatching = {
{vu, vev Sin[ArcTan[INPUTPARAMETER[TanBeta]]]},
{vd, vev Cos[ArcTan[INPUTPARAMETER[TanBeta]]]}
};

(* vev is a keyword in SUSYScaleUserMatching, describing SM VEV matched into full theory *)

LowScale = LowEnergyConstant[MZ];

SMTower = False;

OnlyLowEnergyFlexibleSUSY = True;

LowScaleFirstGuess = LowEnergyConstant[MZ];


UseHiggs2LoopMSSM = True;
EffectiveMu = \[Mu];

PotentialLSPParticles = { Chi, Sv, Su, Sd, Se, Cha, Glu };

DefaultPoleMassPrecision = HighPrecision;
HighPoleMassPrecision    = {hh, Ah, Hpm};
MediumPoleMassPrecision  = {};
LowPoleMassPrecision     = {};

ExtraSLHAOutputBlocks = {
   {FlexibleSUSYOutput,
           {{0, Hold[HighScale]},
            {1, Hold[SUSYScale]},
            {2, Hold[LowScale]} } },
   {ALPHA, {{ArcSin[Pole[ZH[2,2]]]}}},
   {HMIX , {{1, \[Mu]},
            {2, vu / vd},
            {3, Sqrt[vu^2 + vd^2]},
            {4, M[Ah[2]]^2},
            {101, B[\[Mu]]},
            {102, vd},
            {103, vu} } },
   {Au,    {{1, 1, T[Yu][1,1] / Yu[1,1]},
            {2, 2, T[Yu][2,2] / Yu[2,2]},
            {3, 3, T[Yu][3,3] / Yu[3,3]} } },
   {Ad,    {{1, 1, T[Yd][1,1] / Yd[1,1]},
            {2, 2, T[Yd][2,2] / Yd[2,2]},
            {3, 3, T[Yd][3,3] / Yd[3,3]} } },
   {Ae,    {{1, 1, T[Ye][1,1] / Ye[1,1]},
            {2, 2, T[Ye][2,2] / Ye[2,2]},
            {3, 3, T[Ye][3,3] / Ye[3,3]} } },
   {MSOFT, {{1, MassB},
            {2, MassWB},
            {3, MassG},
            {21, mHd2},
            {22, mHu2},
            {31, SignedAbsSqrt[ml2[1,1]]},
            {32, SignedAbsSqrt[ml2[2,2]]},
            {33, SignedAbsSqrt[ml2[3,3]]},
            {34, SignedAbsSqrt[me2[1,1]]},
            {35, SignedAbsSqrt[me2[2,2]]},
            {36, SignedAbsSqrt[me2[3,3]]},
            {41, SignedAbsSqrt[mq2[1,1]]},
            {42, SignedAbsSqrt[mq2[2,2]]},
            {43, SignedAbsSqrt[mq2[3,3]]},
            {44, SignedAbsSqrt[mu2[1,1]]},
            {45, SignedAbsSqrt[mu2[2,2]]},
            {46, SignedAbsSqrt[mu2[3,3]]},
            {47, SignedAbsSqrt[md2[1,1]]},
            {48, SignedAbsSqrt[md2[2,2]]},
            {49, SignedAbsSqrt[md2[3,3]]} } }
};

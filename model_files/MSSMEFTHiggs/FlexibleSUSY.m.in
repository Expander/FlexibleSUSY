FSModelName = "@CLASSNAME@";
FSEigenstates = SARAH`EWSB;
FSDefaultSARAHModel = MSSM;
OnlyLowEnergyFlexibleSUSY = True;
FlexibleEFTHiggs = True;

EXTPAR = {
    {0, MSUSY},
    {1, M1Input},
    {2, M2Input},
    {3, M3Input},
    {4, MuInput},
    {5, mAInput},
    {25, TanBeta}
};

FSAuxiliaryParameterInfo = {
    {mq2Input, { LesHouches -> MSQ2IN,
                 ParameterDimensions -> {3,3},
                 InputParameter -> True
               } },
    {mu2Input, { LesHouches -> MSU2IN,
                 ParameterDimensions -> {3,3},
                 InputParameter -> True
               } },
    {md2Input, { LesHouches -> MSD2IN,
                 ParameterDimensions -> {3,3},
                 InputParameter -> True
               } },
    {ml2Input, { LesHouches -> MSL2IN,
                 ParameterDimensions -> {3,3},
                 InputParameter -> True
               } },
    {me2Input, { LesHouches -> MSE2IN,
                 ParameterDimensions -> {3,3},
                 InputParameter -> True
               } },
    {AuInput,  { LesHouches -> AUIN,
                 ParameterDimensions -> {3,3},
                 InputParameter -> True
               } },
    {AdInput,  { LesHouches -> ADIN,
                 ParameterDimensions -> {3,3},
                 InputParameter -> True
               } },
    {AeInput,  { LesHouches -> AEIN,
                 ParameterDimensions -> {3,3},
                 InputParameter -> True
               } }
};

EWSBOutputParameters = { mHd2, mHu2 };

Qmatch = With[
    { mt = Yu[3,3] vu / Sqrt[2],
      mQ2 = mq2Input[3,3],
      mU2 = mu2Input[3,3],
      Xt = AuInput[3,3] - \[Mu]/(vu/vd)
    },
    Simplify @
    Sqrt[Sqrt[Times @@ Eigenvalues[{{mt^2 + mQ2, mt Xt}, {mt Xt, mt^2 + mU2}}]]]
];

QmatchGuess = With[
    { mt = 160,
      mQ2 = mq2Input[3,3],
      mU2 = mu2Input[3,3],
      Xt = AuInput[3,3] - MuInput/TanBeta
    },
    Simplify @
    Sqrt[Sqrt[Times @@ Eigenvalues[{{mt^2 + mQ2, mt Xt}, {mt Xt, mt^2 + mU2}}]]]
];

EvalIf[expr_] := Block[{If}, expr];

SUSYScale = EvalIf @ If[MSUSY != 0, MSUSY, Qmatch];

SUSYScaleFirstGuess = EvalIf @ If[MSUSY != 0, MSUSY, QmatchGuess];

SUSYScaleInput = {
    {vu, Sqrt[vu^2 + vd^2] Sin[ArcTan[TanBeta]]},
    {vd, Sqrt[vu^2 + vd^2] Cos[ArcTan[TanBeta]]},
    {MassB, M1Input},
    {MassWB, M2Input},
    {MassG, M3Input},
    {mq2, mq2Input},
    {mu2, mu2Input},
    {md2, md2Input},
    {ml2, ml2Input},
    {me2, me2Input},
    {\[Mu], MuInput},
    {B[\[Mu]], mAInput^2/(TanBeta + 1/TanBeta)},
    {T[Yu], AuInput Yu},
    {T[Yd], AdInput Yd},
    {T[Ye], AeInput Ye}
};

InitialGuessAtSUSYScale = {
    {vu, LowEnergyConstant[vev] Sin[ArcTan[TanBeta]]},
    {vd, LowEnergyConstant[vev] Cos[ArcTan[TanBeta]]},
    {MassB, M1Input},
    {MassWB, M2Input},
    {MassG, M3Input},
    {mq2, mq2Input},
    {mu2, mu2Input},
    {md2, md2Input},
    {ml2, ml2Input},
    {me2, me2Input},
    {\[Mu], MuInput},
    {B[\[Mu]], mAInput^2/(TanBeta + 1/TanBeta)},
    {T[Yu], AuInput Yu},
    {T[Yd], AdInput Yd},
    {T[Ye], AeInput Ye}
};

(* VEV is the SM-like VEV in the MSSM *)
MatchingScaleInput = {
    {vu, VEV Sin[ArcTan[vu/vd]]},
    {vd, VEV Cos[ArcTan[vu/vd]]}
};

LowScale = LowEnergyConstant[MZ];

LowScaleFirstGuess = LowEnergyConstant[MZ];

(* N.B. LowScaleinput is not used by the EFTHiggs spectrum
 calculation, but is needed for decoupling scheme used by
 FlexibleDecay *)

LowScaleInput = {
    {Yu, Automatic},
    {Yd, Automatic},
    {Ye, Automatic},
    {vd, 2 MZDRbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2] Cos[ArcTan[vu/vd]]},
    {vu, 2 MZDRbar / Sqrt[GUTNormalization[g1]^2 g1^2 + g2^2] Sin[ArcTan[vu/vd]]}
};


UseHiggs2LoopMSSM = True;
EffectiveMu = \[Mu];

PotentialLSPParticles = { Chi, Sv, Su, Sd, Se, Cha, Glu };

DefaultPoleMassPrecision = HighPrecision;
HighPoleMassPrecision    = {hh, Ah, Hpm};
MediumPoleMassPrecision  = {};
LowPoleMassPrecision     = {};

ExtraSLHAOutputBlocks = {
   {FlexibleSUSYOutput,
           {{0, Hold[HighScale]},
            {1, Hold[SUSYScale]},
            {2, Hold[LowScale]} } },
   {FlexibleSUSYLowEnergy,
           {{21, FlexibleSUSYObservable`aMuon} } },
   {ALPHA, {{ArcSin[Pole[ZH[2,2]]]}}},
   {HMIX , {{1, \[Mu]},
            {2, vu / vd},
            {3, Sqrt[vu^2 + vd^2]},
            {4, M[Ah[2]]^2},
            {101, B[\[Mu]]},
            {102, vd},
            {103, vu} } },
   {Au,    {{1, 1, T[Yu][1,1] / Yu[1,1]},
            {2, 2, T[Yu][2,2] / Yu[2,2]},
            {3, 3, T[Yu][3,3] / Yu[3,3]} } },
   {Ad,    {{1, 1, T[Yd][1,1] / Yd[1,1]},
            {2, 2, T[Yd][2,2] / Yd[2,2]},
            {3, 3, T[Yd][3,3] / Yd[3,3]} } },
   {Ae,    {{1, 1, T[Ye][1,1] / Ye[1,1]},
            {2, 2, T[Ye][2,2] / Ye[2,2]},
            {3, 3, T[Ye][3,3] / Ye[3,3]} } },
   {MSOFT, {{1, MassB},
            {2, MassWB},
            {3, MassG},
            {21, mHd2},
            {22, mHu2},
            {31, SignedAbsSqrt[ml2[1,1]]},
            {32, SignedAbsSqrt[ml2[2,2]]},
            {33, SignedAbsSqrt[ml2[3,3]]},
            {34, SignedAbsSqrt[me2[1,1]]},
            {35, SignedAbsSqrt[me2[2,2]]},
            {36, SignedAbsSqrt[me2[3,3]]},
            {41, SignedAbsSqrt[mq2[1,1]]},
            {42, SignedAbsSqrt[mq2[2,2]]},
            {43, SignedAbsSqrt[mq2[3,3]]},
            {44, SignedAbsSqrt[mu2[1,1]]},
            {45, SignedAbsSqrt[mu2[2,2]]},
            {46, SignedAbsSqrt[mu2[3,3]]},
            {47, SignedAbsSqrt[md2[1,1]]},
            {48, SignedAbsSqrt[md2[2,2]]},
            {49, SignedAbsSqrt[md2[3,3]]} } }
};

FSCalculateDecays = True;
FSDecayParticles = {hh, Ah, Hpm, Su, Sd, Se, Sv};

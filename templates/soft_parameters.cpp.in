// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_soft_parameters.hpp"
#include "wrappers.hpp"
#include "functors.hpp"

#include <iostream>

namespace flexiblesusy {

#define INPUT(parameter) input.parameter
#define TRACE_STRUCT soft_traces
#define TRACE_STRUCT_TYPE Soft_traces
#define CALCULATE_TRACES(l) calc_soft_traces(l);

const int @ModelName@_soft_parameters::numberOfParameters;

@ModelName@_soft_parameters::@ModelName@_soft_parameters(const @ModelName@_input_parameters& input_)
   : @ModelName@_susy_parameters(input_)
{
   set_number_of_parameters(numberOfParameters);
}

@ModelName@_soft_parameters::@ModelName@_soft_parameters(
   const @ModelName@_susy_parameters& susy_model
   @cCtorParameterList@
)
   : @ModelName@_susy_parameters(susy_model)
   @parameterCopyInit@
{
   set_number_of_parameters(numberOfParameters);
}

Eigen::ArrayXd @ModelName@_soft_parameters::beta() const
{
   return calc_beta().get().unaryExpr(Chop<double>(get_zero_threshold()));
}

@ModelName@_soft_parameters @ModelName@_soft_parameters::calc_beta(int loops) const
{
@beta@

   const @ModelName@_susy_parameters susy_betas(@ModelName@_susy_parameters::calc_beta(loops));

   return @ModelName@_soft_parameters(susy_betas, @betaParameterList@);
}

@ModelName@_soft_parameters @ModelName@_soft_parameters::calc_beta() const
{
   return calc_beta(get_loops());
}

void @ModelName@_soft_parameters::clear()
{
   @ModelName@_susy_parameters::clear();

@clearParameters@
}

Eigen::ArrayXd @ModelName@_soft_parameters::get() const
{
   Eigen::ArrayXd pars(@ModelName@_susy_parameters::get());
   pars.conservativeResize(numberOfParameters);

@display@

   return pars;
}

void @ModelName@_soft_parameters::print(std::ostream& ostr) const
{
   @ModelName@_susy_parameters::print(ostr);
   ostr << "soft parameters at Q = " << get_scale() << ":\n";
@printParameters@
}

void @ModelName@_soft_parameters::set(const Eigen::ArrayXd& pars)
{
   @ModelName@_susy_parameters::set(pars);

@set@
}

@ModelName@_soft_parameters::Soft_traces @ModelName@_soft_parameters::calc_soft_traces(int loops) const
{
   Soft_traces soft_traces;

   if (loops > 0) {
@calc1LTraces@
   }

   if (loops > 1) {
@calc2LTraces@
   }

   if (loops > 2) {
@calc3LTraces@
   }

   return soft_traces;
}

std::ostream& operator<<(std::ostream& ostr, const @ModelName@_soft_parameters& soft_pars)
{
   soft_pars.print(ostr);
   return ostr;
}

} // namespace flexiblesusy

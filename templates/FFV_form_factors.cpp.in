// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

/**
 * @file @ModelName@_FFV_form_factors.cpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#include <complex>
#include <iostream> // TODO: remove this include
#include <valarray>

#include "@ModelName@_mass_eigenstates.hpp"
#include "concatenate.hpp"
#include "cxx_qft/@ModelName@_qft.hpp"

#include "wrappers.hpp"

using namespace flexiblesusy;
using namespace @ModelName@_cxx_diagrams;
using namespace @ModelName@_cxx_diagrams::fields;

namespace {

static constexpr double oneOver32PiSquared = 1.0/(32.0*Pi*Pi);

/**
 * @class MuEGammaVertexCorrectionSF
 * @brief A template that calculate contributions to the mu to e gamma
 *        of a given particle in a one loop diagram specified
 *        by a photon emitter and an exchange particle.
 * @tparam Args Specifies in order the field of which to
 *              calculate the electric dipole moment,
 *              the photon emitter and the exchange particle
 *              in a one-loop diagram where the photon emitter
 *              is a scalar and the exchange particle a fermion.
 *
 * This template evaluates the contribution to the electric
 * dipole moment of a one loop diagram with fields given by
 * \a Args.
 */
template <class Fj, class Fi, class V, class S1, class S2,
          class F>
struct FFV_SSF {
   static std::valarray<std::complex<double>>
   value(const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
         context_base const& context);
};

/**
* @class EDMVertexCorrectionFS
* @brief A template that calculate contributions to the EDM
*        of a given particle in a one loop diagram specified
*        by a photon emitter and an exchange particle.
* @tparam Args Specifies in order the field of which to
*              calculate the electric dipole moment,
*              the photon emitter and the exchange particle
*              in a one-loop diagram where the photon emitter
*              is a fermion and the exchange particle a scalar.
*
* This template evaluates the contribution to the electric
* dipole moment of a one loop diagram with fields given by
* \a Args.
*/

template <class FermionIn, class Fi, class Spectator, class Emitter1, class Emitter2,
          class ExchangeParticle>
struct FFV_FFS {
   static std::valarray<std::complex<double>>
   value(const typename field_indices<FermionIn>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
         context_base const& context);
};

} // anonymous namespace

namespace flexiblesusy {
namespace @ModelName@_FFV_form_factors {
@FFVFormFactors_InterfaceDefinitions@
}
} // namespace flexiblesusy

namespace {
/**
* @defgroup LoopFunctions Loop functions
* @brief The loop functions necessary for the Fe_I -> Fe_J gamma one-loop calculations.
*
* These are OneLoopFunctionA(), OneLoopFunctionB()
* as specified in arXiv:0808.1819
*/

// function from eq. 15 of hep-ph/9510309
double OneLoopFunctionA(double r)
{
   if (is_zero(1.0 - r)) {
      return 1.5;
   } else if (is_zero(r)) {
      return 2.0;
   } else {
      return (2.0 - 9.0 * r + 18.0 * r * r - 11.0 * r * r * r +
              6.0 * r * r * r * std::log(r)) /
             pow(1.0 - r, 4);
   }
}

double OneLoopFunctionB(double r)
{
   if (is_zero(1.0 - r)) {
      return 1.0 / 12.0;
   } else if (is_zero(r)) {
      return 1.0 / 6.0;
   } else {
      return (1.0 - 6.0 * r + 3.0 * r * r + 2.0 * r * r * r -
              6.0 * r * r * std::log(r)) /
             6.0 / pow(1.0 - r, 4);
   }
}

double OneLoopFunctionC(double r)
{
   if (is_zero(1.0 - r)) {
      return 1.0 / 3.0;
   } else if (is_zero(r)) {
      return 1.0;
   } else {
      return (1.0 - r * r + 2.0 * r * std::log(r)) / pow(1.0 - r, 3);
   }
}

double OneLoopFunctionD(double r)
{
   if (is_zero(1.0 - r)) {
      return -9.0 / 2.0;
   } else {
      return (16.0 - 45.0 * r + 36.0 * r * r - 7.0 * r * r * r +
              6.0 * (2.0 - 3.0 * r) * std::log(r)) /
             pow(1.0 - r, 4);
   }
}

double OneLoopFunctionE(double r)
{
   if (is_zero(1.0 - r)) {
      return 1.0 / 12.0;
   } else if (is_zero(r)) {
      return 1.0 / 3.0;
   } else {
      return (2.0 + 3.0 * r - 6.0 * r * r + r * r * r + 6.0 * r * std::log(r)) /
             6.0 / pow(1.0 - r, 4);
   }
}

double OneLoopFunctionF(double r)
{
   if (is_zero(1.0 - r)) {
      return 2.0 / 3.0;
   } else {
      return (-3.0 + 4.0*r - r*r - 2.0*std::log(r)) / pow(1.0 - r, 3);
   }
}

template <class Spectator>
typename field_indices<Spectator>::type default_indices_for_spectator(void);

template <>
typename field_indices<@FFVFormFactors_PhotonName@>::type 
default_indices_for_spectator<@FFVFormFactors_PhotonName@>(void)
{
   return {};
}

template <>
typename field_indices<@FFVFormFactors_GluonName@>::type 
default_indices_for_spectator<@FFVFormFactors_GluonName@>(void)
{
   return {};
}

// emit V from the internal scalar line
template<class Fj, class Fi, class V, class SA, class SB, class F>
std::valarray<std::complex<double>> FFV_SSF<Fj, Fi, V, SA, SB, F>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out, 
      context_base const& context) {

   using VertexFBarFjSBar = Vertex<typename F::lorentz_conjugate, typename SA::lorentz_conjugate, Fj>;
   using VertexFiBarFS    = Vertex<typename Fi::lorentz_conjugate, SB, F>;
   using VertexSBarSVBar  = Vertex<typename SB::lorentz_conjugate, SA, typename V::lorentz_conjugate>;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mi = context.mass<Fi>(indices_out);

   auto spectator_indices = default_indices_for_spectator<V>();

   // loop over all possible particle "generations" attached to both vertices
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
   for (const auto& indexIn: index_range<VertexFBarFjSBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFS>()) {

         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFBarFjSBar::template indices_of_field<2>(indexIn);
         const auto iFieldIndices = VertexFiBarFS::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the fermion in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFS::template indices_of_field<2>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // match indices of the scalar in the loop
         const auto scalarFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<1>(indexIn);
         const auto scalarIndicesOut = VertexFiBarFS::template indices_of_field<1>(indexOut);
         if (scalarFieldIndicesIn != scalarIndicesOut) 
            continue;

          if (isSMField<SA>(scalarFieldIndicesIn) && isSMField<F>(fermionFieldIndicesIn)) {
            continue;
          }

         const auto vertexIn = VertexFBarFjSBar::evaluate(indexIn, context);
         const auto vertexOut = VertexFiBarFS::evaluate(indexOut, context);

         const auto indexEmit = concatenate(scalarFieldIndicesIn, scalarFieldIndicesIn, spectator_indices);
         const auto vertexEmit = VertexSBarSVBar::evaluate(indexEmit, context);

         const auto mS = context.mass<SA>(scalarFieldIndicesIn);
         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         const auto x = pow(mF/mS, 2);

         // TODO: check the sign convention of this coupling
         std::complex<double> vector_boson_coupling {-vertexEmit.value(1,0)};

         // eq. 15 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A1L =
            - 1./18. * vertexOut.right() * vertexIn.left() * OneLoopFunctionA(x);
         // eq. 16 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A2L = 
            - vertexOut.left() * vertexIn.right() * OneLoopFunctionB(x) 
            - vertexOut.left()* vertexIn.left() * mF/mj * OneLoopFunctionC(x)
            - mi/mj * vertexOut.right() * vertexIn.left() * OneLoopFunctionB(x); 

         // eq. 15 & 16 of hep-ph/9510309 after replacement L <-> R (possibly with different sign)
         const std::complex<double> A1R = 
            - 1./18. * vertexOut.left() * vertexIn.right() * OneLoopFunctionA(x);
         const std::complex<double> A2R = 
            - vertexOut.right() * vertexIn.left() * OneLoopFunctionB(x) 
            - vertexOut.right()* vertexIn.right() * mF/mj * OneLoopFunctionC(x)
            - mi/mj * vertexOut.left() * vertexIn.right() * OneLoopFunctionB(x); 

         const std::complex<double> massFactor = pow(mS,-2);

         res += oneOver32PiSquared * vector_boson_coupling * massFactor 
            * std::valarray<std::complex<double>> {A1L, A1R, A2L, A2R};
      }
   }

   return res;
}

// emit spectator from the internal fermion line
template<class Fj, class Fi, class V, class FA, class FB, class S>
std::valarray<std::complex<double>> FFV_FFS<Fj, Fi, V, FA, FB, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out,
      context_base const& context) {

   using VertexFBarFjSBar = Vertex<typename S::lorentz_conjugate, typename FA::lorentz_conjugate, Fj>;
   using VertexFiBarFS    = Vertex<typename Fi::lorentz_conjugate, FB, S>;
   using VertexFBarFVBar  = Vertex<typename FB::lorentz_conjugate, FA, typename V::lorentz_conjugate>;
   
   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mi = context.mass<Fi>(indices_out);

   // loop over all possible particle "generations" attached to both vertices
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
   for (const auto& indexIn: index_range<VertexFBarFjSBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFS>()) {

         // cycle if generations of external fermions are different then requested   
         const auto jFieldIndices = VertexFBarFjSBar::template indices_of_field<2>(indexIn);
         const auto iFieldIndices = VertexFiBarFS::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         const auto fermionFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<1>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFS::template indices_of_field<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut )
            continue;

         const auto scalarFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<0>(indexIn);
         const auto scalarIndicesOut = VertexFiBarFS::template indices_of_field<2>(indexOut);
         if (scalarFieldIndicesIn != scalarIndicesOut) 
            continue;

         if (isSMField<S>(scalarFieldIndicesIn) && isSMField<FA>(fermionFieldIndicesIn)) {
            continue;
         }

         const auto vertexIn = VertexFBarFjSBar::evaluate(indexIn, context);
         const auto vertexOut = VertexFiBarFS::evaluate(indexOut, context);
         
         auto spectator_indices = default_indices_for_spectator<V>();
         const auto indexEmit = concatenate(fermionFieldIndicesIn, fermionFieldIndicesIn, spectator_indices);
         const auto vertexEmit = VertexFBarFVBar::evaluate(indexEmit, context);

         const auto mF = context.mass<FA>(fermionFieldIndicesIn);
         const auto mS = context.mass<S>(scalarFieldIndicesIn);
         const auto x = pow(mF/mS, 2);

         std::complex<double> vector_boson_coupling {vertexEmit.left()};

         // eq. 18 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A1L =
            - 1./18. * vertexOut.right() * vertexIn.left() * OneLoopFunctionD(x);
         // eq. 19 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A2L = 
            - vertexOut.left() * vertexIn.right() * OneLoopFunctionE(x) 
            - vertexOut.left()* vertexIn.left() * mF/mj * OneLoopFunctionF(x)
            - mi/mj * vertexOut.right() * vertexIn.left() * OneLoopFunctionE(x);

         // eq. 18 & 18 of hep-ph/9510309 after replacement L <-> R (possibly with different sign)
         const std::complex<double> A1R = 
            - 1./18. * vertexOut.left() * vertexIn.right() * OneLoopFunctionD(x);
         const std::complex<double> A2R = 
            - vertexOut.right() * vertexIn.left() * OneLoopFunctionE(x) 
            - vertexOut.right()* vertexIn.right() * mF/mj * OneLoopFunctionF(x)
            - mi/mj * vertexOut.left() * vertexIn.right() * OneLoopFunctionE(x); 

         const std::complex<double> massFactor = pow(mS,-2);

         res += oneOver32PiSquared * vector_boson_coupling * massFactor 
            * std::valarray<std::complex<double>> {A1L, A1R, A2L, A2R};
      }
   }

   return res;
}

} // anonymous namespace

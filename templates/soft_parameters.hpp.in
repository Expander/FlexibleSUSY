// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================


#ifndef @ModelName@_soft_parameters_H
#define @ModelName@_soft_parameters_H

#include "@ModelName@_susy_parameters.hpp"

#include <iosfwd>

namespace flexiblesusy {

#ifdef TRACE_STRUCT_TYPE
   #undef TRACE_STRUCT_TYPE
#endif
#define TRACE_STRUCT_TYPE Soft_traces

class @ModelName@_soft_parameters : public @ModelName@_susy_parameters {
public:
   explicit @ModelName@_soft_parameters(const @ModelName@_input_parameters& input_ = @ModelName@_input_parameters());
   @ModelName@_soft_parameters(const @ModelName@_susy_parameters& @cCtorParameterList@);
   @ModelName@_soft_parameters(const @ModelName@_soft_parameters&) = default;
   @ModelName@_soft_parameters(@ModelName@_soft_parameters&&) = default;
   virtual ~@ModelName@_soft_parameters() = default;
   @ModelName@_soft_parameters& operator=(const @ModelName@_soft_parameters&) = default;
   @ModelName@_soft_parameters& operator=(@ModelName@_soft_parameters&&) = default;

   virtual Eigen::ArrayXd beta() const override;
   virtual Eigen::ArrayXd get() const override;
   virtual void print(std::ostream&) const override;
   virtual void set(const Eigen::ArrayXd&) override;

   @ModelName@_soft_parameters calc_beta() const;
   @ModelName@_soft_parameters calc_beta(int) const;
   virtual void clear() override;

@setter@
@getter@

protected:
@parameterDef@

private:
   static const int numberOfParameters = @numberOfParameters@;

   struct Soft_traces {
@traceDefs@
   };
   Soft_traces calc_soft_traces(int) const;

@singleBetaFunctionsDecls@
};

std::ostream& operator<<(std::ostream&, const @ModelName@_soft_parameters&);

} // namespace flexiblesusy

#undef TRACE_STRUCT_TYPE

#endif

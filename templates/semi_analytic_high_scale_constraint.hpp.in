// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================


#ifndef @ModelName@_SEMI_ANALYTIC_HIGH_SCALE_CONSTRAINT_H
#define @ModelName@_SEMI_ANALYTIC_HIGH_SCALE_CONSTRAINT_H

#include "@ModelName@_high_scale_constraint.hpp"
#include "@ModelName@_input_parameters.hpp"
#include "single_scale_constraint.hpp"

namespace flexiblesusy {

template <class T>
class @ModelName@;

class Semi_analytic;

template<>
class @ModelName@_high_scale_constraint<Semi_analytic> : public Single_scale_constraint {
public:
@usingSemiAnalyticScaleGetter@
   @ModelName@_high_scale_constraint() = default;
   @ModelName@_high_scale_constraint(@ModelName@<Semi_analytic>*);
   virtual ~@ModelName@_high_scale_constraint() = default;
   virtual void apply() override;
   virtual double get_scale() const override;
   virtual std::string name() const override { return "@ModelName@ high-scale constraint"; }
   virtual void set_model(Model*) override;

   void clear();
   double get_initial_scale_guess() const { return initial_scale_guess; }
   const @ModelName@_input_parameters& get_input_parameters() const;
   @ModelName@<Semi_analytic>* get_model() const { return model; }
   void initialize();
   void set_scale(double s) { scale = s; }
@setSemiAnalyticScaleGetter@
protected:
   void update_scale();
   bool check_non_perturbative();

private:
   double scale{0.};
   double initial_scale_guess{0.};
   @ModelName@<Semi_analytic>* model{nullptr};
@semiAnalyticScaleGetter@
   void check_model_ptr() const;
};

} // namespace flexiblesusy

#endif

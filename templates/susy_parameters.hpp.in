// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#ifndef @ModelName@_susy_parameters_H
#define @ModelName@_susy_parameters_H

#include "betafunction.hpp"
#include "@ModelName@_input_parameters.hpp"

#include <iosfwd>
#include <Eigen/Core>

namespace flexiblesusy {

#ifdef TRACE_STRUCT_TYPE
   #undef TRACE_STRUCT_TYPE
#endif
#define TRACE_STRUCT_TYPE Susy_traces

class @ModelName@_susy_parameters : public Beta_function {
public:
   explicit @ModelName@_susy_parameters(const @ModelName@_input_parameters& input_ = @ModelName@_input_parameters());
   @ModelName@_susy_parameters(double scale_, int loops_, int thresholds_, const @ModelName@_input_parameters& input_@cCtorParameterList@);
   @ModelName@_susy_parameters(const @ModelName@_susy_parameters&) = default;
   @ModelName@_susy_parameters(@ModelName@_susy_parameters&&) = default;
   virtual ~@ModelName@_susy_parameters() = default;
   @ModelName@_susy_parameters& operator=(const @ModelName@_susy_parameters&) = default;
   @ModelName@_susy_parameters& operator=(@ModelName@_susy_parameters&&) = default;

   virtual Eigen::ArrayXd beta() const override;
   virtual Eigen::ArrayXd get() const override;
   void print() const;
   virtual void print(std::ostream&) const;
   virtual void set(const Eigen::ArrayXd&) override;
   const @ModelName@_input_parameters& get_input() const;
   @ModelName@_input_parameters& get_input();
   void set_input_parameters(const @ModelName@_input_parameters&);

   @ModelName@_susy_parameters calc_beta() const;
   @ModelName@_susy_parameters calc_beta(int) const;
   virtual void clear();

@setter@
@getter@
@anomDimPrototypes@

protected:
@parameterDef@
   @ModelName@_input_parameters input{};

private:
   static const int numberOfParameters = @numberOfParameters@;

   struct Susy_traces {
@traceDefs@
   };
   Susy_traces calc_susy_traces(int) const;

@singleBetaFunctionsDecls@
};

std::ostream& operator<<(std::ostream&, const @ModelName@_susy_parameters&);

#undef TRACE_STRUCT_TYPE

} // namespace flexiblesusy

#endif

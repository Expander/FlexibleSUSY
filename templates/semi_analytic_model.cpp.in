// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================


/**
 * @file @ModelName@_semi_analytic_model.cpp
 * @brief implementation of the @ModelName@ model class
 *
 * Contains the definition of the @ModelName@ model class methods
 * which solve EWSB and calculate pole masses and mixings from DRbar
 * parameters.
 *
 * This file was generated with FlexibleSUSY @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#include "@ModelName@_semi_analytic_model.hpp"

namespace flexiblesusy {

using namespace @ModelName@_info;

#define CLASSNAME @ModelName@<Semi_analytic>

#define COEFFICIENT(coefficient) solutions.get_##coefficient()
#define INPUTPARAMETER(parameter) model.get_input().parameter
#define MODELPARAMETER(parameter) model.get_##parameter()

CLASSNAME::@ModelName@(const @ModelName@_slha& model_, bool do_convert_masses_to_slha)
   : @ModelName@_slha(model_, do_convert_masses_to_slha)
{
}

CLASSNAME::@ModelName@(const @ModelName@_input_parameters& input_, bool do_convert_masses_to_slha)
   : @ModelName@_slha(input_, do_convert_masses_to_slha)
{
}

void CLASSNAME::calculate_spectrum()
{
   @ModelName@_mass_eigenstates::calculate_spectrum();
}

void CLASSNAME::clear_problems()
{
   @ModelName@_mass_eigenstates::clear_problems();
}

std::string CLASSNAME::name() const
{
   return @ModelName@_mass_eigenstates::name();
}

void CLASSNAME::run_to(double scale, double eps)
{
   @ModelName@_mass_eigenstates::run_to(scale, eps);
}

void CLASSNAME::print(std::ostream& out) const
{
   @ModelName@_mass_eigenstates::print(out);
   out << "----------------------------------------\n"
          "semi-analytic coefficients:\n"
          "----------------------------------------\n";
@printSemiAnalyticCoefficients@
}

void CLASSNAME::set_precision(double p)
{
   @ModelName@_mass_eigenstates::set_precision(p);
}

const @ModelName@_semi_analytic_solutions& CLASSNAME::get_semi_analytic_solutions() const
{
   return solutions;
}

@ModelName@_semi_analytic_solutions& CLASSNAME::get_semi_analytic_solutions()
{
   return solutions;
}

/**
 * Calculates the semi-analytic coefficients at the current scale,
 * assuming that the boundary conditions are imposed at the scale
 * \c input_scale.  The soft parameters are then set to the values
 * obtained using these coefficients and the current values of the
 * boundary value parameters.
 */
void CLASSNAME::calculate_semi_analytic_solutions(double input_scale)
{
   solutions.set_input_scale(input_scale);
   solutions.set_output_scale(get_scale());
   solutions.calculate_coefficients(*this);
   solutions.evaluate_solutions(*this);
}

std::ostream& operator<<(std::ostream& ostr, const @ModelName@<Semi_analytic>& model)
{
   model.print(ostr);
   return ostr;
}

} // namespace flexiblesusy

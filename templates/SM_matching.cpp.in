// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_SM_matching.hpp"
#include "wrappers.hpp"
#include "two_scale_matching.hpp"
#include "SM_mass_eigenstates.hpp"
#include "@ModelName@_mass_eigenstates.hpp"
#include <cmath>
#include "SM_info.hpp"
#include "@ModelName@_info.hpp"

namespace flexiblesusy {

#define MODELPARAMETER(p) model.get_##p()
#define SMPARAMETER(p) sm.get_##p()
#define INPUTPARAMETER(p) model.get_input().p

/**
 * matches Standardmodel from @ModelName@-Model at tree-level
 */
void @ModelName@_SM_matching::match_high_to_low_scale_model_tree_level(SM_mass_eigenstates& sm, @ModelName@_mass_eigenstates& model)
{
  sm.run_to(model.get_scale());
  model.calculate_DRbar_masses();
  sm.set_Lambdax(Sqr(model.get_M@HiggsBoson()_0@/sm.get_v()));
  sm.calculate_DRbar_masses();
}


/**
 * matches Lambda in SM from @ModelName@ by Higgs mass 1-loop pole mass matching
 */
void @ModelName@_SM_matching::match_high_to_low_scale_model(SM_mass_eigenstates& sm, @ModelName@_mass_eigenstates& model)
{
   const auto model_pole_mass_order = model.get_pole_mass_loop_order();
   const auto sm_pole_mass_order = sm.get_pole_mass_loop_order();

   model.set_pole_mass_loop_order(1);
   sm.set_pole_mass_loop_order(1);

   model.calculate_DRbar_masses();
   model.solve_ewsb_one_loop();
   model.calculate_M@HiggsBoson@_pole();

   sm.run_to(model.get_scale());
   sm.calculate_DRbar_masses();
   sm.solve_ewsb_one_loop();
   sm.calculate_Mhh_pole();

   sm.set_Lambdax((Sqr(model.get_physical().M@HiggsBoson_0@) - Sqr(sm.get_physical().Mhh) + Sqr(sm.get_Mhh()))/Sqr(sm.get_v()));

   model.set_pole_mass_loop_order(model_pole_mass_order);
   sm.set_pole_mass_loop_order(sm_pole_mass_order);

   model.calculate_DRbar_masses();
   model.solve_ewsb();
   sm.calculate_DRbar_masses();
   sm.solve_ewsb();

}

/**
 * matches gauge and Yukawa couplings from SM to @ModelName@ at tree-level
 */
void @ModelName@_SM_matching::match_low_to_high_scale_model_tree_level(@ModelName@_mass_eigenstates& model, SM_mass_eigenstates& sm)
{
   sm.calculate_DRbar_masses();
   model.run_to(sm.get_scale());
   model.set_@hyperchargeCoupling@(sm.get_g1()*SM_info::normalization_g1/@ModelName@_info::normalization_g1);
   model.set_@leftCoupling@(sm.get_g2()*SM_info::normalization_g2/@ModelName@_info::normalization_g2);
   model.set_@strongCoupling@(sm.get_g3()*SM_info::normalization_g3/@ModelName@_info::normalization_g3);

   // 'vev' is regarded as keyword for user-definied matching
   const auto vev = sm.get_v();

@applyUserMatching@

   Eigen::Matrix<double, 3, 3> topDRbar      = ZEROMATRIX(3,3);
   Eigen::Matrix<double, 3, 3> bottomDRbar   = ZEROMATRIX(3,3);
   Eigen::Matrix<double, 3, 3> electronDRbar = ZEROMATRIX(3,3);

   for(unsigned gen = 0; gen < 3; gen++)
   {
      topDRbar(gen, gen)      = sm.get_MFu(gen);
      bottomDRbar(gen, gen)   = sm.get_MFd(gen);
      electronDRbar(gen, gen) = sm.get_MFe(gen);
   }

@setYukawas@

   model.calculate_DRbar_masses();
}

/**
 * matches gauge and Yukawa couplings from SM to @ModelName@ at one-loop
 */
void @ModelName@_SM_matching::match_low_to_high_scale_model(@ModelName@_mass_eigenstates& model, SM_mass_eigenstates& sm)
{
   Eigen::Matrix<double, 3, 3> topDRbar      = ZEROMATRIX(3,3);
   Eigen::Matrix<double, 3, 3> bottomDRbar   = ZEROMATRIX(3,3);
   Eigen::Matrix<double, 3, 3> electronDRbar = ZEROMATRIX(3,3);

   model.run_to(sm.get_scale());
   model.calculate_DRbar_masses();
   model.solve_ewsb();

   sm.calculate_DRbar_masses();
   sm.solve_ewsb();

   const double alpha_em = Sqr(sm.get_g1() * sm.get_g2() * SM_info::normalization_g1 * SM_info::normalization_g2)
            /(4. * Pi * (Sqr(sm.get_g1()*SM_info::normalization_g1) + Sqr(sm.get_g2()*SM_info::normalization_g2)));
   const double alpha_s  = Sqr(sm.get_g3() * SM_info::normalization_g3)/(4. * Pi);
   const double currentScale = sm.get_scale();

@gauge1Linit@
@alphaEM1Lmatching@
@alphaS1Lmatching@

   // at some point, we should consider multithreading here

   model.calculate_M@TopQuark@_pole();
   model.calculate_M@BottomQuark@_pole();
   model.calculate_M@Electron@_pole();
   model.calculate_M@VectorW@_pole();
   model.calculate_M@VectorZ@_pole();

   sm.calculate_MFu_pole();
   sm.calculate_MFd_pole();
   sm.calculate_MFe_pole();
   sm.calculate_MVWp_pole();
   sm.calculate_MVZ_pole();

   // one-loop matched masses
   const double MW2_1L = Sqr(sm.get_physical().MVWp) - Sqr(model.get_physical().M@VectorW_0@) + Sqr(model.get_M@VectorW()_0@);
   const double MZ2_1L = Sqr(sm.get_physical().MVZ) - Sqr(model.get_physical().M@VectorZ_0@) + Sqr(model.get_M@VectorZ()_0@);

   if (MZ2_1L < 0.)
      model.get_problems().flag_tachyon(@ModelName@_info::@VectorZ@);
   else
      model.get_problems().unflag_tachyon(@ModelName@_info::@VectorZ@);

   if (MW2_1L < 0.)
      model.get_problems().flag_tachyon(@ModelName@_info::@VectorW@);
   else
      model.get_problems().unflag_tachyon(@ModelName@_info::@VectorW@);

   for( unsigned gen = 0; gen < 3; gen++)
   {
      topDRbar(gen, gen)      = sm.get_physical().MFu(gen) - model.get_physical().M@TopQuark@(gen) + model.get_M@TopQuark@(gen);
      bottomDRbar(gen, gen)   = sm.get_physical().MFd(gen) - model.get_physical().M@BottomQuark@(gen) + model.get_M@BottomQuark@(gen);
      electronDRbar(gen, gen) = sm.get_physical().MFe(gen) - model.get_physical().M@Electron@(gen) + model.get_M@Electron@(gen);
   }

   // define and apply 1L-matched gauge parameters
   const double g1_1L = AbsSqrt(4. * Pi * alpha_em * (1. + delta_alpha_em) * MZ2_1L / MW2_1L) / @ModelName@_info::normalization_g1;
   const double g2_1L = AbsSqrt(4. * Pi * alpha_em * (1. + delta_alpha_em) / (1. - MW2_1L/MZ2_1L)) / @ModelName@_info::normalization_g2;
   const double g3_1L = AbsSqrt(4. * Pi * alpha_s * (1. + delta_alpha_s)) / @ModelName@_info::normalization_g3;

   model.set_@hyperchargeCoupling@(g1_1L);
   model.set_@leftCoupling@(g2_1L);
   model.set_@strongCoupling@(g3_1L);

   // 'vev' is a keyword for user-defined matching
   const double vev = 2. * AbsSqrt(MZ2_1L/(Sqr(g1_1L*@ModelName@_info::normalization_g1) + Sqr(g2_1L*@ModelName@_info::normalization_g2)));

@applyUserMatching@
@setYukawas@

   model.calculate_DRbar_masses();
   model.solve_ewsb();

}

} //namespace flexiblesusy

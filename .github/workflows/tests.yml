name: tests

on:

  push:
    branches:
      - development
    paths-ignore:
      - '*.rst'
      - 'AUTHORS'
      - 'COPYING'
      - 'doc/**'

  pull_request:
    branches:
      - development
    paths-ignore:
      - '*.rst'
      - 'AUTHORS'
      - 'COPYING'
      - 'doc/**'

jobs:

  build:

    # Pull requests don't share secrets with a fork so we run tests only on PRs
    # comming from the FlexibleSUSY/FlexibleSUSY repo.
    # For non PR triggers we check for the name of the repo so that if someone
    # forks FS github doesn't try to run tests on their code.
    if: (!github.event.pull_request && github.repository == 'FlexibleSUSY/FlexibleSUSY') || github.event.pull_request.head.repo.url == 'https://api.github.com/repos/FlexibleSUSY/FlexibleSUSY'
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        CXXCOMPILER: [g++, clang++]

    env:
      IMAGE_VERSION: '0.4.7'
      FORMCALC_VERSION: '9.9'
      MODELS: 'SM THDMII MSSM CMSSM CMSSMCKM MRSSM2 MRSSM2CKM MSSMCPV MSSMNoFV ScalarLeptoquarks LRLR E6SSM NUHMSSMNoFVHimalaya'

    steps:

      # action checks-out our repository directly under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@v2

      - name: Pull the docker image
        run: docker pull navir/opensuseleap-for-flexiblesusy:$IMAGE_VERSION

      - name: Run the image
        # mount $GITHUB_WORKSPACE as /FlexibleSUSY on the container
        run: docker run -it -d --name builder -v $GITHUB_WORKSPACE:/FlexibleSUSY navir/opensuseleap-for-flexiblesusy:$IMAGE_VERSION

      - name: Copy Wolfram Engine license to the image
        run: |
          docker exec builder bash -c "mkdir /root/.WolframEngine/Licensing && echo $MATHPASS > /root/.WolframEngine/Licensing/mathpass"
          printf "Checking if wolframscript command is workings... "
          docker exec builder bash -c 'if [ $(wolframscript -code 1+2) -eq 3 ]; then echo OK; else echo fail && exit 1; fi'
          printf "Checking if math command is workings... "
          docker exec builder bash -c '
              if [[ $(math -run "Print[7 673, $SystemID]; Exit[]" < /dev/null) =~ 4711([^$"\r\n"]*) ]];
              then
                echo OK
              else
                echo fail
                exit 1
              fi
            '
        env:
          MATHPASS: ${{ secrets.MATHPASS }}

      - name: Install FormCalc
        run: |
          docker exec builder bash -c "wget -q -O - http://www.feynarts.de/formcalc/FormCalc-$FORMCALC_VERSION.tar.gz | tar xzf -"
          docker exec builder bash -c "cd FormCalc-$FORMCALC_VERSION && PATH=/usr/local/Wolfram/WolframEngine/12.1/Executables:\$PATH ./compile"
          docker exec builder bash -c "echo 'AppendTo[\$Path, \"/FormCalc-$FORMCALC_VERSION\"];' >> /root/.WolframEngine/Kernel/init.m"

      - name: Create models
        run: docker exec builder bash -c "cd FlexibleSUSY && for m in $MODELS; do ./createmodel --name=\$m; done"

      - name: Configure
        run: docker exec builder bash -c "
               cd /FlexibleSUSY &&
               ./configure
                  --with-cxx=$CXXCOMPILER
                  --with-models=$(echo $MODELS| tr ' ' ',')
                  --with-loop-libraries=collier,looptools
                  --with-looptools-incdir=/LoopTools-$CXXCOMPILER/include
                  --with-looptools-libdir=/LoopTools-$CXXCOMPILER/lib64
                  --with-collier-incdir=/COLLIER/include
                  --with-collier-libdir=/COLLIER/lib
                  --with-himalaya-incdir=/Himalaya-$CXXCOMPILER/include
                  --with-himalaya-libdir=/Himalaya-$CXXCOMPILER/lib64
                  --with-optional-modules=test
                  --with-cxxflags=\"-std=c++14 -O2 -fPIC -Wall -Wpedantic -pipe\"
               "
        env:
          CXXCOMPILER: ${{ matrix.CXXCOMPILER }}

      - name: Make
        run: docker exec builder bash -c 'cd FlexibleSUSY && VERBOSE=1 make -j2'

      - name: Run Mathematica tests
        run: docker exec builder bash -c 'cd FlexibleSUSY && VERBOSE=1 make -j2 execute-meta-tests'

      - name: Build compiled tests
        run: docker exec builder bash -c 'cd FlexibleSUSY && VERBOSE=1 make -j2 alltest'

      # Having a single name entry and a bash loop over integers in the run tag would save a
      # little writing but splitting it into multiple entries makes it easier to see on github which loop
      # library has failed
      - name: Run compiled and shell script (Softsusy)
        # Makefile doesn't know about FLEXIBLESUSY_LOOP_LIBRARY flag so tests are not
        # re-run on FLEXIBLESUSY_LOOP_LIBRARY change. Every run must clean logs after itself.
        run: docker exec -e FLEXIBLESUSY_LOOP_LIBRARY=0 -e VERBOSE=1 builder bash -c 'cd FlexibleSUSY && make -j2 execute-compiled-tests execute-shell-tests && make clean-test-log'

      - name: Run compiled and shell script (Collier)
        run: docker exec -e FLEXIBLESUSY_LOOP_LIBRARY=1 -e VERBOSE=1 builder bash -c 'cd FlexibleSUSY && make -j2 execute-compiled-tests execute-shell-tests && make clean-test-log'

      - name: Run compiled and shell script (LoopTools)
        run: docker exec -e FLEXIBLESUSY_LOOP_LIBRARY=2 -e VERBOSE=1 builder bash -c 'cd FlexibleSUSY && make -j2 execute-compiled-tests execute-shell-tests && make clean-test-log'

      - name: Run compiled and shell script (fflite)
        run: docker exec -e FLEXIBLESUSY_LOOP_LIBRARY=3 -e VERBOSE=1 builder bash -c 'cd FlexibleSUSY && make -j2 execute-compiled-tests execute-shell-tests && make clean-test-log'

      - name: Testing pack-SM-src
        run: |
          docker exec builder bash -c 'cd FlexibleSUSY && make pack-SM-src'
          docker exec builder bash -c 'cd FlexibleSUSY && rm -rf models/SM'
          docker exec builder bash -c 'cd FlexibleSUSY && tar -xf SM.tar.gz'
          # The dashes '\' are neeeded here even though the previous step with
          # configure didn't need them. Maybe it has smothething to with
          # 'run: ' vs 'run: |'?
          docker exec builder bash -c "
               cd /FlexibleSUSY &&
               ./configure \
                  --with-cxx=$CXXCOMPILER \
                  --with-models=SM \
                  --with-loop-libraries=collier,looptools \
                  --with-looptools-incdir=/LoopTools-$CXXCOMPILER/include \
                  --with-looptools-libdir=/LoopTools-$CXXCOMPILER/lib64 \
                  --with-collier-incdir=/COLLIER/include \
                  --with-collier-libdir=/COLLIER/lib \
                  --disable-meta \
                  --with-optional-modules=test
               "
          docker exec -e VERBOSE=1 builder bash -c 'cd FlexibleSUSY && make -j2'
          docker exec -e VERBOSE=1 builder bash -c 'cd FlexibleSUSY && make -j2 execute-meta-tests'
          docker exec -e VERBOSE=1 builder bash -c 'cd FlexibleSUSY && make -j2 alltest'
          for i in {0..3}
          do
            docker exec -e FLEXIBLESUSY_LOOP_LIBRARY=$i -e VERBOSE=1 builder bash -c 'cd FlexibleSUSY && make -j2 execute-compiled-tests execute-shell-tests && make clean-test-log'
          done
        env:
          CXXCOMPILER: ${{ matrix.CXXCOMPILER }}

      - name: (Optional) Save logs in case of an error
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{matrix.CXXCOMPILER}}-${{matrix.LOOPLIBRARY}}_test-logs
          path: test/test_*.log


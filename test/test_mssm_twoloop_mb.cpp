#define BOOST_TEST_DYN_LINK
#define BOOST_TEST_MODULE test_mssm_twoloop_mb

#include <boost/test/unit_test.hpp>
#include "mssm_twoloop_mb.hpp"
#include "wrappers.hpp"
#include <cmath>

using namespace flexiblesusy;
using namespace flexiblesusy::mssm_twoloop_mb;

const double g3 = std::sqrt(4*Pi* 0.1184);
const double mt = 173.34;
const double mb = 3.20;

struct Results {
   Parameters pars{};
   double mb2l{};
};

BOOST_AUTO_TEST_CASE(test_non_universal)
{
   std::vector<Results> results = {
       // g3 mt  mb     mg   mst1   mst2   msb1   msb2   msusy                   Xt  Xb      Q
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400.,                  0., 0., 1000.             }, 0.0060994559262305161 },
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400.,                  0., 0., 1100.             }, 0.0055186465519328747 },
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400.,  std::sqrt(6.)*1300, 0., 1000.             }, 0.006097076094553221  },
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400.,  std::sqrt(6.)*1300, 0., 1100.             }, 0.0055162667202560654 },
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400., -std::sqrt(6.)*1300, 0., 1000.             }, 0.0061018357579078102 },
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400., -std::sqrt(6.)*1300, 0., 1100.             }, 0.0055210263836096849 },
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400.,                  0.,  std::sqrt(6.), 1000. }, 0.006097451701735793  },
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400.,                  0., -std::sqrt(6.), 1100. }, 0.0055206961724585694 },
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400.,  std::sqrt(6.)*1300,  std::sqrt(6.), 1000. }, 0.0060950747439344347 },
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400.,  std::sqrt(6.)*1300, -std::sqrt(6.), 1100. }, 0.0055183134669058234 },
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400., -std::sqrt(6.)*1300,  std::sqrt(6.), 1000. }, 0.006099828659537153  },
      { { g3, mt, mb, 1000., 1200., 1300., 1500., 1600.,  1400., -std::sqrt(6.)*1300, -std::sqrt(6.), 1100. }, 0.0055230788780113154 },
      { { g3, mt, mb, 1600., 1500., 1400., 1300., 1200.,  1100.,                  0., -std::sqrt(6.), 1000. }, 0.0062822480184172172 },
      { { g3, mt, mb, 1600., 1500., 1400., 1300., 1200.,  1100.,  std::sqrt(6.)*1300, -std::sqrt(6.), 1000. }, 0.0062798983371975597 },
      { { g3, mt, mb, 1600., 1500., 1400., 1300., 1200.,  1100., -std::sqrt(6.)*1300, -std::sqrt(6.), 1000. }, 0.0062845976996368739 },
      { { g3, mt, mb, 1600., 1500., 1400., 1300., 1200.,  1100.,                  0.,              0, 1000. }, 0.0062791938133536125 },
      { { g3, mt, mb, 1600., 1500., 1400., 1300., 1200.,  1100.,  std::sqrt(6.)*1300,  std::sqrt(6.), 1000. }, 0.0062737898965503939 }
   };

   for (const auto& r: results) {
      const double mb2l = delta_mb_2loop(r.pars);
      BOOST_CHECK_CLOSE_FRACTION(mb2l, r.mb2l, 1e-8);
   }
}

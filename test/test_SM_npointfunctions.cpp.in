// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

#define BOOST_TEST_MODULE Test NPointFunctions
#include <boost/test/included/unit_test.hpp>
#include <boost/test/data/test_case.hpp>
#include <boost/version.hpp>

#include "random_sign_dataset.hpp"
#include "test_complex_equality.hpp"

#include "lowe.h"

#include "SM_two_scale_spectrum_generator.hpp"
#include "SM_input_parameters.hpp"
#include "SM_mass_eigenstates.hpp"

@NPointFunctions_Headers@

using namespace flexiblesusy;
namespace bdata = boost::unit_test::data;

namespace
{
constexpr int number_of_random_samples = 100;
static_assert( number_of_random_samples >= 2,
	"There must be at least two random samples." );

auto random_data_points( void ) -> decltype(
	bdata::random( 0.15, 0.3 ) ^
	bdata::random( 200.0, 3000.0 ) ^
	bdata::random( 100.0, 1000.0 )
)
{
	auto LambdaIN_random = bdata::random( 0.15, 0.3 );
	auto Qin_random = bdata::random( 200.0, 3000.0 );
	auto QEWSB_random = bdata::random( 100.0, 1000.0 );
	
	return (
		std::move(LambdaIN_random) ^ std::move(Qin_random) ^
		std::move(QEWSB_random)
	);
}

auto data_points( void ) -> decltype(
	bdata::xrange( 1, number_of_random_samples + 1 ) ^
	random_data_points()
)
{
	auto random_datset =
		bdata::xrange( 1, number_of_random_samples + 1 ) ^
		random_data_points();
	
	return std::move(random_datset);
}

SM_input_parameters wrap_input_parameters(
	double LambdaIN, int Qin, double QEWSB )
{
	SM_input_parameters input;
	
	input.LambdaIN = LambdaIN;
	input.Qin = Qin;
	input.QEWSB = QEWSB;
	
	return input;
}

SM_mass_eigenstates calculate_spectrum(
	const SM_input_parameters &input )
{
	softsusy::QedQcd qedqcd;
	
	Spectrum_generator_settings spectrum_generator_settings;
	spectrum_generator_settings.set(
		Spectrum_generator_settings::calculate_sm_masses, 1.0 );
	
	SM_spectrum_generator<Two_scale> spectrum_generator;
	spectrum_generator.set_settings( spectrum_generator_settings );
	spectrum_generator.set_parameter_output_scale( qedqcd.get_scale() );

	spectrum_generator.run( qedqcd, input );
	return spectrum_generator.get_model();
}
}

#define INPUTPARAMETER(p) context.model.get_input().p
#define MODELPARAMETER(p) context.model.get_##p()
#define DERIVEDPARAMETER(p) context.model.p()
#define PHASE(p) context.model.get_##p()

namespace flexiblesusy
{
namespace SM_cxx_diagrams
{
@CXXDiagrams_VertexData@

@CXXDiagrams_Vertices@

namespace npointfunctions
{
@NPointFunctions_Selfenergy_hh_1loop@
}
}
}

BOOST_AUTO_TEST_SUITE(selfenergy_test_suite, 
	* boost::unit_test::tolerance(1.0e-12) )

BOOST_DATA_TEST_CASE( test_selfenergies,
	data_points(),
  index, LambdaIN, Qin, QEWSB )
{
	auto input_parameters = wrap_input_parameters(
		LambdaIN, Qin, QEWSB );
	auto model = calculate_spectrum( input_parameters );
	
	auto problems = model.get_problems();
	BOOST_WARN_MESSAGE( !problems.have_problem(),
		"There was an error calculating the spectrum: " <<
		problems << "Skipping data point..." );
		
	if( problems.have_problem() == false )
	{
		auto fs_selfenergy_hh = model.self_energy_hh_1loop( 0 );
		auto np_selfenergy_hh = 
			SM_cxx_diagrams::npointfunctions::selfenergy_hh_1loop(
				model, std::array<int, 0>{},
				std::array<Eigen::Vector4d, 0>{}
		);
		
		TEST_COMPLEX_EQUALITY( np_selfenergy_hh, fs_selfenergy_hh );
	} else
		BOOST_TEST( true );
}

BOOST_AUTO_TEST_SUITE_END()

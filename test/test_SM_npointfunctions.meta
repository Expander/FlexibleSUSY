(* :Copyright:

   ====================================================================
   This file is part of FlexibleSUSY.

   FlexibleSUSY is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation, either version 3 of the License,
   or (at your option) any later version.

   FlexibleSUSY is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with FlexibleSUSY.  If not, see
   <http://www.gnu.org/licenses/>.
   ====================================================================

*)

WriteString[OutputStream["stdout",1],"\r"];(*remove In[1]:=*)
Global`time = AbsoluteTime[];
Off[Susyno`LieGroups`dims];(*hide complainings from Susyno`LieGroups`dims*)
Needs["FlexibleSUSY`"];

(*INITIALIZATION***************************************************************)
workingDirectory = Directory[];
SARAH`SARAH[OutputDirectory] = FileNameJoin[{workingDirectory, "Output"}];
SARAH`SARAH[InputDirectories] =
{
   FileNameJoin@{workingDirectory, "sarah"},
   ToFileName@{$sarahDir, "Models"}
};

Start@"SM";

modelFile = FileNameJoin@{workingDirectory, "models", "SM", "FlexibleSUSY.m"};

FlexibleSUSY`LoadModelFile@modelFile;
FlexibleSUSY`Private`PrepareUnrotatedParticles@FSEigenstates;
allParameters = FlexibleSUSY`SetupModelParameters@@FlexibleSUSY`ReadSARAHBetaFunctions[];

{massMatrices, Lat$massMatrices} = FlexibleSUSY`SetupMassMatrices@allParameters;
FlexibleSUSY`SetupOutputParameters@massMatrices;

Needs@"NPointFunctions`";
Needs@"WilsonCoeffs`";

(*NPF CALCULATION**************************************************************)
hhSelfenergy = NPointFunctions`NPointFunction[
   {SARAH`HiggsBoson}, {SARAH`HiggsBoson},
   NPointFunctions`UseCache -> False,
   NPointFunctions`ZeroExternalMomenta -> True,
   NPointFunctions`KeepProcesses -> NPointFunctions`Irreducible];

hhSelfenergyCode = NPointFunctions`CreateCXXFunctions[
   hhSelfenergy,
   "selfenergy_hh_1loop",
   Identity][[2]];

(*VERTICES*********************************************************************)
(*if some additional vetices exist, then get them*)
existedVerticesFile = FileNameJoin@{
   SARAH`$sarahCurrentOutputMainDir,
   ToString@FlexibleSUSY`FSEigenstates,
   "CXXDiagrams",
   "CreatedVertices.m"};

existedVertices = If[TrueQ@FileExistsQ@existedVerticesFile,
   Get@existedVerticesFile, {}];

(*get vertices which doesn't exist yet*)
newVertices = Complement[
   NPointFunctions`VerticesForNPointFunction@hhSelfenergy,
   existedVertices];

If[newVertices==={},
   verticesCode = {"",""},
   (* else *)
   verticesCode = CXXDiagrams`CreateVertices[
   newVertices,
   CXXdiagrams`MaximumVerticesLimit -> Length@newVertices][[1]]
];

(*CODE REPLACEMENTS************************************************************)
templateCode = StringJoin@Riffle[Utils`ReadLinesInFile[
   FileNameJoin@{workingDirectory, "test", "test_SM_npointfunctions.cpp.in"}],
   "\n"];
code = StringReplace[templateCode,
   {
   "@NPointFunctions_Selfenergy_hh_1loop@" -> hhSelfenergyCode,
   "@NPointFunctions_Headers@" -> NPointFunctions`CreateCXXHeaders[],
   "@CXXDiagrams_VertexPrototypes@" -> verticesCode[[1]],
   "@CXXDiagrams_VertexDefinitions@" -> verticesCode[[2]]
   }];

fileHandle = OpenWrite@FileNameJoin@{workingDirectory, "test", "test_SM_npointfunctions.cpp"};
fileHandle ~ WriteString ~ code;
Close@fileHandle;
WriteString[OutputStream["stdout",1],#]&@StringJoin[
   "\033[1;36m>>test>>\033[1;0m test_SM_npointfunctions.meta \033[1;32mdone\033[1;0m in ",
   ToString@N[AbsoluteTime[]-Global`time,{Infinity,3}],
   " seconds.\n"
];
